# NOTE: This Makefile assumes that dependencies are installed and, if a virtual
# environment is used, it is activated.

## Variables ##################################################################
# NOTE: Define any variables here if needed in the future

# Docker image configuration
REGISTRY_NAMESPACE ?= jaeaeich
NAME := poiesis
VERSION := $(shell poetry version | awk '{print$$2}')
BUILD_DATE := $(shell date -u +'%Y-%m-%dT%H:%M:%SZ')
GIT_REVISION := $(shell git rev-parse HEAD)
PY_VERSION := $(shell poetry run python --version | awk '{print$$2}')
DOCKERFILE := deployment/images/Dockerfile

# Full image names
IMAGE_NAME := ${REGISTRY_NAMESPACE}/${NAME}
IMAGE_TAG_LATEST := ${IMAGE_NAME}:latest
IMAGE_TAG_VERSION := ${IMAGE_NAME}:${VERSION}

## Documentation ##############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.

default: help

.PHONY: help
help:
	@echo "\nUsage: make [target] ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Available targets:\n"

	@echo "Code Quality ------------------------------------------------------------------"
	@echo "  \033[1m\033[35mformat-lint\033[0m \033[37m(fl)\033[0m: \033[36mRun linter, formatter, spellcheck.\033[0m"
	@echo "  \033[1m\033[35mprecommit-check\033[0m \033[37m(pc)\033[0m: \033[36mRun all pre-commit checks.\033[0m"
	@echo "  \033[1m\033[35msecurity\033[0m \033[37m(s)\033[0m: \033[36mRun security scans.\033[0m"
	@echo "  \033[1m\033[35mtype-check\033[0m \033[37m(tc)\033[0m: \033[36mPerform type checking.\033[0m\n"

	@echo "Deployment --------------------------------------------------------------------"
	@echo "  \033[1m\033[35mbuild-image\033[0m \033[37m(bi)\033[0m: \033[36mBuild container image.\033[0m"
	@echo "  \033[1m\033[35mclean-image\033[0m \033[37m(ci)\033[0m: \033[36mRemove container image.\033[0m\n"

	@echo "Documentation -----------------------------------------------------------------"
	@echo "  \033[1m\033[35mdocs\033[0m \033[37m(d)\033[0m: \033[36mGenerate project documentation.\033[0m\n"

	@echo "Environment Management --------------------------------------------------------"
	@echo "  \033[1m\033[35mclean-venv\033[0m \033[37m(cv)\033[0m: \033[36mRemove virtual environment.\033[0m"
	@echo "  \033[1m\033[35minstall\033[0m \033[37m(i)\033[0m: \033[36mInstall app and dependencies.\033[0m"
	@echo "  \033[1m\033[35mvenv\033[0m \033[37m(v)\033[0m: \033[36mCreate virtual environment.\033[0m\n"

	@echo "Testing -----------------------------------------------------------------------"
	@echo "  \033[1m\033[35mtest\033[0m \033[37m(t)\033[0m: \033[36mRun all tests.\033[0m\n"

## Autogenerated Targets ######################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Do not modify the autogenerated targets, unless necessary, write custom
# targets in the custom section below..

.PHONY: clean-venv cv
clean-venv:
	@echo "\nRemoving the virtual environment ++++++++++++++++++++++++++++++++++++++++++++++\n"
	@rm -rf .venv

cv: clean-venv

.PHONY: docs d
docs:
	@echo "\nGenerating project documentation ++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run sphinx-apidoc -f -o docs/source/pages poiesis
	@cd docs && make html
	@echo "\nSummary ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Documentation generated successfully."
	@echo "Open docs/build/html/index.html in your browser."
	@echo "Or serve it locally using:"
	@echo "python -m http.server -d docs/build/html/"

d: docs

.PHONY: format-lint fl
format-lint:
	@echo "\nRunning linter and formatter using ruff and typos +++++++++++++++++++++++++++++\n"
	@poetry run ruff format && poetry run ruff check --fix
	@typos .

fl: format-lint

.PHONY: install i
install:
	@echo "\nInstalling this package its dependencies +++++++++++++++++++++++++++++++++\n"
	@poetry install --with=code_quality,docs,misc,test,types,vulnerability

i: install

.PHONY: precommit-check pc
precommit-check:
	@echo "\nRunning pre-commit checks +++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pre-commit run --all-files

pc: precommit-check

.PHONY: security s
security:
	@echo "\nRunning security scans using bandit and safety ++++++++++++++++++++++++++++++++\n"
	@poetry run safety check --full-report
	@poetry run bandit -c pyproject.toml -r poiesis

s: security

.PHONY: test t
test:
	@echo "\nRunning tests using pytest ++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pytest tests/

t: test

.PHONY: type-check tc
type-check:
	@echo "\nPerforming type checking with mypy ++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run mypy poiesis

tc: type-check

.PHONY: venv v
venv:
	@echo "\nCreating a virtual environment ++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@python -m venv .venv
	@echo "\nSummary +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Virtual environment created successfully."
	@echo "To activate the environment for this shell session, run:"
	@echo "source .venv/bin/activate"

v: venv

## Custom Targets #############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Add any custom targets here if needed in the future.

PHONY: build-docker-image bi
build-docker-image:
	@echo "\nBuilding Docker image +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@docker build \
		--build-arg PY_VERSION="${PY_VERSION}" \
		--build-arg BUILD_DATE="${BUILD_DATE}" \
		--build-arg GIT_REVISION="${GIT_REVISION}" \
		--build-arg VERSION="${VERSION}" \
		-t ${IMAGE_TAG_VERSION} \
		-t ${IMAGE_TAG_LATEST} \
		-f ${DOCKERFILE} .
	@echo "\nDocker image built successfully: jaeaeich/poiesis:latest\n"

bi: build-docker-image

.PHONY: clean-docker-image ci
clean-docker-image:
	@echo "\nRemoving Docker image +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@docker rmi ${IMAGE_TAG_LATEST} ${IMAGE_TAG_VERSION} 2>/dev/null || echo "Docker images not found."
	@echo "\nDocker image removed successfully (if it existed).\n"

 ci: clean-docker-image
